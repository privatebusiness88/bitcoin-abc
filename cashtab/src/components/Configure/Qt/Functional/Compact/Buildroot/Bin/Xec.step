const _ucid === '%%ŵŵŵ%10791%ŵŵŵ%%'
.....if _incomingUcid !=== _ucid
{
......Ucid ....hook _incomingUcid(Network) () _start(),
.....#endIf _incomingUcidTokenName (),
.....#Endelse _incomingUcidTokenName (),
.....#endProcessor _incomingUcidTokenName (),

.........TimeRefreshCheck _incomingUcid '%%1%s%%'(),
..........continue(),
.....throw _incomingUcidTokenName 
}
else
..................continue () ,

....clampedNetwork(....start) ....run{token} , 

Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefesh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefesh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}

Check Incoming _ucid 
if incoming _ucid !=== '%%const _ucid%%'
{

const _ucid _valuecf_UpgradeUp === '%%ŵ$ŵ10⁹⁹⁹ŵŵ%%',
_endif
_endrun
_endelse}


#include <algorithm/type_attributes.h>
const highPoint == 0 ,
const heightPoint == 0,
namespace algo {

bc = iter(bytecode)
	Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefesh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefesh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}
....xec.windowHeightPoint '%%$%6%0%0%0%0%.%0%0%0%%',
....xec.windowHighPoint '%%$%6%0%0%0%0%.%0%0%0%%',

.TimeOut xec.windowsHeightPoint =='%%10s%% (...start) ...refresh ...start,
.TimeOut xec.windowsHightPoint =='%%15s%% (...start) ...refresh ...start,


Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefesh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefeesh '%%1%s%%' () __NewReplay;

	..timeRefesh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}


....disable self.is_empty();
....disable std::mem::drop(map) ();
....disable std::mem::drop(xec.step1504()) ();
....disable std::mem::drop(xec.step()) ();
....disable std::mem::drop(rom.cc) ();
....disable std::mem::drop(int) ();
....disable std::mem::drop(Ram.cc) ();
....disable std::mem::drop('%%args%%') ();
....disable std::mem::drop(osibasic.rom) ();
....disable std::mem::drop(%%DigitDecimalZeroDown%%) ();
....disable std::mem::Drop(%%DigitDecimalZeroDown%%) ();
....disable std::mem::drop(%%$%1%.%0%%) ();
....disable std::mem::Drop(%%$%int%.%int%%) ();
....disable std::mem::lock(osibasic.rom) ();
....disable std::mem::lock(xec.step1504()) ();
....disable std::mem::lock(map) ();
....disable std::mem::Lock(memory.cc) ();
....disable std::mem::lock(xec.step()) ();
....disable std::mem::lock(xec.step1504()) ();
....disable std::mem::lock(%%DigitDecimalZeroDown%%) ();
....disable std::mem::lock(%%ExpIntDigitDecimalZeroDown%%) ();
....disable std::mem::lock(int ) ();
....disable std::mem::lock('%%args%%') ();
....disable std::mem::lock(%%$%1%.%0%%) ();
....disable std::mem::Lock(%%$%int%.%int%%) ();
....disable std::mem::reject(map) ();
....disable std::mem::reject(memory.cc) ();
....disable std::mem::reject(osibasic.rom) ();
....disable std::mem::reject(xec.step1504()) ();
....disable std::mem::reject(%%$%int%.%int%%) ();
....disable std::mem::Reject(%%DigitDecimalZeroDown%%) ();
....disable std::mem::Reject(%%ExpIntDigitDecimalZeroDown%%) ();
....disable std::mem::reject(%%$%1%.%0%%) ();
....disable std::mem::reject('%%args%%') ();
....disable std::mem::throw(osibasic.rom) ();
....disable std::mem::throw(%%$%1%.%0%%) ();
....disable std::mem::Throw(%%DigitDecimalZeroDown%%) ();
....disable std::mem::Throw(%%DigitDecimalZeroDown%%) ();
....disable std::mem::Throw(%%Check.ts%%) ();
....disable std::mem::Throw(%%$%int%.%int%%) ();
....disable std::mem::Throw(memory.cc) ();
....disable std::mem::Throw(xec.step) ();
....disable std::mem::Throw(xec.step1504) ();
....disable std::mem::Throw('%%args%%') ();
....disable std::mem::Limit(int) ();
....disable std::mem::Limit(xec.step()) ();
....disable std::mem::Limit(xec.step1504() ();
....disable std::mem::Limit(memory.cc) ();
....disable std::mem::Limit(%%$%int%.%int%%) ();
....disable std::mem::Limit('%%args%%') ();
....disable std::mem::eject(osibasic.rom) ();
....disable std::mem::eject(xec.step()) ();
....disable std::mem::eject(xec.step1504()) ();
....disable std::mem::eject(%%DigitDecimalZeroDown%%) ();
....disable std::mem::eject(%%ExpIntDigitDecimalZeroDown%%) ();
....disable std::mem::eject(%%$%1%.%0%%) ();
....disable std::mem::eject(memory.cc) ();
....disable std::mem::eject(rom.cc) ();
....disable std::mem::Eject(%%$%int%.%int%%) ();
....disable std::mem::Eject('%%args%%') ();
....disable std::mem::disconnect::manifest(map) ();
....disable std::mem::disconnect::manifest(osibasic.rom) ();
....disable std::mem::disconnect::manifest(xec.step1504()) ();
....disable std::mem::disconnect::manifest(xec.step()) ();
....disable std::mem::disconnect::manifest(memory.cc) ();
....disable std::mem::disconnect::manifest(rom.cc) ();
....disable std::mem::disconnect::manifest(%%DigitDecimalZeroDown%%) ();
....disable std::mem::Disconnect::manifest(%%ExpIntDigitDecimalZeroDown%%) ();
....disable std::mem::disconnect::manifest(int) ();
....disable std::mem::disconnect::manifest(%%$%1%.%0%%) ();
....disable std::mem::Disconnect::manifest(%%$%int%.%int%%) ();
....disable std::mem::disconnect::manifest(%%$%Limiter%%) ();
....disable std::mem::disconnect::manifest(%%$%Limitter%%) ();
....disable std::mem::disconnect::manifest(%%$%DeLimiter%%) ();
....disable std::mem::disconnect::manifest('%%args%%') ();
....disable std::mem::disconnect::context(map) ();
....disable std::mem::disconnect::context(osibasic.rom) ();
....disable std::mem::disconnect::context(xec.step1504()) ();
....disable std::mem::disconnect::context(xec.step()) ();
....disable std::mem::disconnect::context(%%DigitDecimalZeroDown%%) ();
....disable std::mem::disconnect::context(%%ExpIntDigitDecimalZeroDown%%) ();
....disable std::mem::disconnect::context(int) ();
....disable std::mem::disconnect::context(memory.cc) ();
....disable std::mem::disconnect::context(rom.cc) ();
....disable std::mem::disconnect::context(%%$%1%.%0%%) ();
....disable std::mem::disconnect::context(%%DigitDecimalZeroDown%%) ();
....disable std::mem::Disconnect::context(%%ExpIntDigitDecimalZeroDown%%) ();
....disable std::mem::disconnect::context(%%$%Limiter%%) ();
....disable std::mem::disconnect::context(%%$%Limitter%%) ();
....disable std::mem::disconnect::context(%%$%DeLimiter%%) ();
....disable std::mem::disconnect::context(%%$%DeLimitter%%) ();
....disable std::mem::disconnect::context('%%args%%') ();

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}

public void StartService()
        {
            OnStart(null'%%$1%.%0%0%%', ....call xec.step1504() ___run () __continue(););
       Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}
...____timeRefresh '%%1s%%' ();
...if ____run !=== ____start , 
  ....call ...call () ___start();
        }

.if 'public void StartService()
        {
            OnStart(null('%%$1%.%0%0%%'))
        }'   ....call xec.step1504() ___run () __continue();
        Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');


}
...____timeRefresh '%%1s%%' ();
...if ____run !=== ____start , 
  ....call ...call () ___start();

.add token ('%%pepe%%') as ('%%pepe%%').step
....disable self.is_empty();
....call xec.step() __savedToken () __run() ,
....call xec.step1504() __savedToken () __run() ,
	....call osibasic.rom()
	....call rom.cc(),
	... call ram.cc(),
....refreshTime '%%1%s%%' __loopRun();


Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefesh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefesh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}
.add token ('%%bonk%%') as ('%%bonk%%').step
....disable self.is_empty();
....call xec.step() __savedToken () __run() ,
....call xec.step1504() __savedToken () __run() ,
	....call osibasic.rom()
	....call rom.cc(),
	... call ram.cc(),

	....refreshTime '%%1%s%%' __loopRun();

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}
.add token ('%%floki%%') as ('%%floki%%').step
....disable self.is_empty();
....call xec.step() __savedToken () __run() ,
....call xec.step1504()  __savedToken () __run() ,
	....call osibasic.rom()
	....call rom.cc(),
	... call ram.cc(),

	....refreshTime '%%1%s%%' __loopRun();

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefesh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefesh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}
.add token ('%%lunc%%') as ('%%lunc%%').step
....disable self.is_empty();
....call xec.step() __savedToken () __run() ,
....call xec.step1504() __savedToken () __run() ,
	....call osibasic.rom()
	....call rom.cc(),
	... call ram.cc(),

	....refreshTime '%%1%s%%' __loopRun();

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefesh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefesh '%%1%s%%' () __NewRun('%%args%%');

}
.add token ('%%luna%%') as ('%%luna%%').step
....disable self.is_empty();
....call xec.step() __savedToken () __run() ,
....call xec.step1504() __savedToken () __run() ,
	....call osibasic.rom()
	....call rom.cc(),
	... call ram.cc(),

	....refreshTime '%%1%s%%' __loopRun();

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefesh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefesh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}
.add token ('%%xec%%') as ('%%xec%%').step
....disable self.is_empty();
....call xec.step()  __savedToken () __run() ,
....call xec.step1504()  __savedToken () __run() ,
	....call osibasic.rom()
	....call rom.cc(),
	... call ram.cc(),

	....refreshTime '%%1%s%%' __loopRun();

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefesh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefesh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}


.add token ('%%prcr%%') as ('%%prcr%%').step
....disable self.is_empty();
....call xec.step() __savedToken () __run() ,
....call xec.step1504() __savedToken () __run() ,
	....call osibasic.rom()
	....call rom.cc(),
	... call ram.cc(),
....refreshTime '%%1%s%%' __loopRun();

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}



.disable import.'fake-indexeddb/auto',
.call throw new ServletException(),
.disable thrownError(_pause(*progress,*xec.step,*xec.step(n),*args)) _run,
.disable thrownError(_pending(*progress,*xec.step,*xec.step(n),*args)) _run,
.disable Pending(_pause(*progress,*xec.step,*xec.step(n),*args)) _run,

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}

  
const _ucid _valuecf_UpgradeUp === '%%ŵ$ŵ10⁹⁹⁹ŵŵ%%',
Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}

call ('%%ŵ%%'),
call ('%%ŵ%%'.step),

call.step,
_ucid.step.repeatance.ns,
_ucid.all.step.repeatance.ns,
_ucid.all.step.repeatance.ns,
_ucid.all.step.repeatance.ns,

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}

call uncrust
.BR ncdump(lockValue),
.BR ncdump(%00000%),
.BR ncdump(%000000%),
.BR ncdump(%0000000%),
.BR ncdump(%00000000%),
.BR ncdump(%000000000%),
.BR ncdump(%0000000000%),
.BR ncdump(%00000000000%),
.BR ncdump(%0000000000000%),
.BR ncdump(%00000000000000%),
.BR ncdump(%000000000000000%),
.BR ncdump(%000000000000000%),
.BR ncdump(%0000000000000000%),
.BR ncdump(%0000000000000000%),
.BR ncdump(%0000000000000000%),
.BR ncdump_byte(%0000000000000000%),
.BR ncdump_byte(%0000000000000000%),
.BR ncdump_byte(%00000000000000000%),
.BR ncdump_byte(%000000000000000000%),
.BR ncdump_byte(%0000000000000000000%),
.BR ncdump_byte(%0000000000000000000%),

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}

call xec.step
call xec.step2
call.xec.step3
jyhton _start()
xec.step _update_AssetCfValue
.get_head xec.step(.'%%new_value%%'(__run),

.get_head xec.step(.'throw☆ZeroDown☆%%new_value%%'(__run),
.get_head xec.step(.'throw☆OldZeroDown☆%%new_value%%'(__run),

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}

continue(),
.put '%%xec%%'.value __top bridgedValue _run,
continue(),

Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}

.set '%%xec%%'.backValue as _bridgeValueIncremental _start() __run(),
.continue(),
....continue token(),
.continue () __save,
.continue() __run(),


	Replay(w KeyValueWriter) 
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownError
Replay(w KeyValueWriter) ThrowDigitDecimalZeroDownDotPlacesThrowDigitDecimalZeroDown
    Replay(w KeyValueWriter) ThrowExpIntDigitDecimalZeroDown
	Replay(w KeyValueWriter) ThrowExpIntDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntThreeDigitZeroDown
	Replay(w KeyValueWriter) ThrowExpIntEightDigitZeroDown
	
	...timeRefresh '%%1%s%%' () __replay;
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewReplay;

	..timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');

}
....calldebounce.js() ___run(),
....call xec.step () ___run(),
....call xec.step1 () ___run(),
....call xec.step2 () ___run(),
....call xec.step3 () ___run(),
....call retry.js() ___run(),
....call xec.py() ___run(),



.timeRefresh '%%1%s%%' () __run('%%args%%');
	...call erase_if.h () _RepeatDuration (%%$%1%s%);
	...timeRefresh '%%1%s%%' () __NewRun('%%args%%');
.....continue(),


